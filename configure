#!/usr/bin/env bash

set -ueo pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Flag to control fetching
NO_FETCH=0

# Parse command-line arguments
for arg in "$@"; do
  if [ "$arg" = "--no-fetch" ]; then
    NO_FETCH=1
  else
    echo "Invalid option: $arg" >&2
    exit 1
  fi
done

function log() {
  echo "$1" > /dev/stderr
}

function ignore_comments() {
  grep -vE '^#|^$' "$@"
}

log "Copying files"
cp "$SCRIPT_DIR/config.json" .
cp "$SCRIPT_DIR/index.html" .

mkdir -p facts/inflation
cp "$SCRIPT_DIR/facts/inflation/"* facts/inflation

mkdir -p facts/exchange-rates
cp "$SCRIPT_DIR/facts/exchange-rates/"* facts/exchange-rates

if test "$NO_FETCH" -eq 0; then
  log "Fetching MSCI indexes"
  ignore_comments "$SCRIPT_DIR/"data/interesting-indexes/msci.csv | "$SCRIPT_DIR/scripts/fetch-msci-indexes.py"

  log "Fetching indexes from Wall Street Journal"
  ignore_comments "$SCRIPT_DIR/"data/interesting-indexes/wall-street-journal.csv | "$SCRIPT_DIR/scripts/fetch-indexes-from-wsj.py" 57494d5ed7ad44af85bc59a51dd87c90

  log "Fetching indexes from MSN"
  ignore_comments "$SCRIPT_DIR/"data/interesting-indexes/msn.csv | "$SCRIPT_DIR/scripts/fetch-indexes-from-msn.py"

  log "Fetching ETFs"
  ignore_comments facts/indexes.csv | "$SCRIPT_DIR/scripts/fetch-etfs.py" > facts/etfs.csv
fi

# Initialize the build.ninja file
log "Generating build.ninja..."

# Start the ninja file with the rule for creating .json files
cat <<EOF > build.ninja
# Ninja build file generated by script
rule generate_kde
  command=$SCRIPT_DIR/scripts/simulate.py '\$INDEX' --hold \$HOLD --years \$YEARS \$ADJUST_CURRENCY \$ADJUST_INFLATION
  description=Generating KDE for \$in -> \$out
EOF

function emit_build() {
    BASE_NAME="$1"
    shift
    HOLD="$1"
    shift
    YEARS="$1"
    shift
    ADJUST_CURRENCY="$1"
    shift
    ADJUST_INFLATION="$1"
    shift

    OUTPUT_JSON="simulations"
    OUTPUT_JSON+="/${BASE_NAME}"
    OUTPUT_JSON+="/hold-${HOLD}"
    OUTPUT_JSON+="/years-${YEARS}"
    if test -z "$ADJUST_CURRENCY"; then OUTPUT_JSON+="/adjust-currency"; else OUTPUT_JSON+="/ignore-currency"; fi
    if test -z "$ADJUST_INFLATION"; then OUTPUT_JSON+="/adjust-inflation"; else OUTPUT_JSON+="/ignore-inflation"; fi
    OUTPUT_JSON+="/kde.json"

    # Append the build target to the ninja file
    {
      echo "build $OUTPUT_JSON: generate_kde $csv_file"
      echo "  YEARS = $YEARS"
      echo "  HOLD = $HOLD"
      echo "  INDEX = $base_name"
      echo "  ADJUST_CURRENCY = $ADJUST_CURRENCY"
      echo "  ADJUST_INFLATION = $ADJUST_INFLATION"
    } >> build.ninja
}

for ADJUST_CURRENCY in "" "--ignore-currency"; do
  for ADJUST_INFLATION in "" "--ignore-inflation"; do
  # Find all CSV files in facts/indexes/*-*.csv
    for csv_file in facts/indexes/*.csv; do
      # Extract the base name of the CSV (e.g., myfile-123.csv -> myfile-123)
      base_name=$(basename "$csv_file" .csv)

      for YEARS in 10 15 20 25 max; do
        emit_build "$base_name" 1.0 "$YEARS" "$ADJUST_CURRENCY" "$ADJUST_INFLATION"
        emit_build "$base_name" 3.0 "$YEARS" "$ADJUST_CURRENCY" "$ADJUST_INFLATION"
        emit_build "$base_name" 5.0 "$YEARS" "$ADJUST_CURRENCY" "$ADJUST_INFLATION"
        if test "$YEARS" != 10; then
          emit_build "$base_name" 10.0 "$YEARS" "$ADJUST_CURRENCY" "$ADJUST_INFLATION"
        fi
      done
    done
  done
done

log "build.ninja file has been generated."
