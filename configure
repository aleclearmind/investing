#!/usr/bin/env bash

set -ueo pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

function log() {
  echo "$1" > /dev/stderr
}

function ignore_comments() {
  grep -vE '^#|^$' "$@"
}

log "Copying files"
cp "$SCRIPT_DIR/config.json" .
cp "$SCRIPT_DIR/index.html" .

mkdir -p facts/inflation
cp "$SCRIPT_DIR/facts/inflation/"* facts/inflation

mkdir -p facts/exchange-rates
cp "$SCRIPT_DIR/facts/exchange-rates/"* facts/exchange-rates

log "Fetching MSCI indexes"
ignore_comments "$SCRIPT_DIR/"data/interesting-indexes/msci.csv | "$SCRIPT_DIR/scripts/fetch-msci-indexes.py"

log "Fetching indexes from Wall Street Journal"
ignore_comments "$SCRIPT_DIR/"data/interesting-indexes/wall-street-journal.csv | "$SCRIPT_DIR/scripts/fetch-indexes-from-wsj.py" 57494d5ed7ad44af85bc59a51dd87c90

log "Fetching ETFs"
ignore_comments facts/indexes.csv | "$SCRIPT_DIR/scripts/fetch-etfs.py" > facts/etfs.csv

# Initialize the build.ninja file
log "Generating build.ninja..."

# Start the ninja file with the rule for creating .json files
cat <<EOF > build.ninja
# Ninja build file generated by script
rule generate_kde
  command=$SCRIPT_DIR/scripts/simulate.py '\$INDEX' --hold \$HOLD --years \$YEARS
  description=Generating KDE for \$in -> \$out
EOF

function emit_build() {
    BASE_NAME="$1"
    shift
    HOLD="$1"
    shift
    YEARS="$1"
    shift

    output_json="simulations/${BASE_NAME}/hold-${HOLD}/years-${YEARS}/kde.json"

    # Append the build target to the ninja file
    echo "build $output_json: generate_kde $csv_file" >> build.ninja
    echo "  YEARS = $YEARS" >> build.ninja
    echo "  HOLD = $HOLD" >> build.ninja
    echo "  INDEX = $base_name" >> build.ninja
}

# Find all CSV files in facts/indexes/*-*.csv
for csv_file in facts/indexes/*.csv; do
  # Extract the base name of the CSV (e.g., myfile-123.csv -> myfile-123)
  base_name=$(basename "$csv_file" .csv)

  for YEARS in 10 15 20 25 max; do
    emit_build "$base_name" 1.0 "$YEARS"
    emit_build "$base_name" 3.0 "$YEARS"
    emit_build "$base_name" 5.0 "$YEARS"
    if test "$YEARS" != 10; then
      emit_build "$base_name" 10.0 "$YEARS"
    fi
  done

done

log "build.ninja file has been generated."
